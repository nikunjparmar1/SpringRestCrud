buildscript {
    repositories {

        maven { url "http://repo.spring.io/libs-snapshot" }

        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'spring-boot'

group = 'apiserver'
version = '1'

description = "Practice Application"

def publishMap = [warFile: group + "-" + version + ".war", user:"tom", password:"cat", server:"localhost", port: 90, deploy: group]

ext {
    springBootVersion = '1.2.1.RELEASE'
    springAuthVersion = '2.0.5.RELEASE'
    springVersion = '4.1.2.RELEASE'

    activemqVersion = '5.10.0'

    commonsDbcpVersion = '1.2.2'
    postgresqlVersion = '9.1-901.jdbc4'
    entityManagerVersion = '4.3.8.Final'
    hibernateJpaVersion = '1.0.0.Final'
    hibernateValidatorVersion = '5.1.3.Final'

    marc4jVersion = '2.6.3'

    jayWayVersion = '0.9.1'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

repositories {
    mavenCentral()
    mavenLocal()

  /*  maven.url "http://repo.spring.io/libs-release"
    maven.url "http://repo.spring.io/snapshot"
    maven.url "http://repo.spring.io/milestone"*/
}

dependencies {

    //All spring boot dependent libraries
    compile ('org.springframework.boot:spring-boot-gradle-plugin:' + springBootVersion)
    compile('org.springframework.boot:spring-boot-starter-data-jpa:' + springBootVersion)
    compile ('org.springframework.boot:spring-boot-starter-web:' + springBootVersion)
    compile ('org.springframework.boot:spring-boot-starter-actuator:' + springBootVersion)
    compile ('org.springframework.boot:spring-boot-starter-integration:' + springBootVersion)

    //JMS Library
    compile ('org.springframework:spring-jms:' + springVersion)
    compile ('org.apache.activemq:activemq-client:' + activemqVersion)

    //Persistence Library
    compile ('commons-dbcp:commons-dbcp:' + commonsDbcpVersion)
    compile ('org.springframework:spring-orm:' + springVersion)
    compile ('postgresql:postgresql:' + postgresqlVersion)

    compile ('org.hibernate:hibernate-entitymanager:' + entityManagerVersion)
    compile ('org.hibernate.javax.persistence:hibernate-jpa-2.1-api:'+ hibernateJpaVersion)
    compile ('org.hibernate:hibernate-validator:' + hibernateValidatorVersion)

    //Marc library
    compile ( 'info.freelibrary:freelib-marc4j:' + marc4jVersion)
    compile('com.h2database:h2:1.4.187')
    compile('org.dbunit:dbunit:2.4.8')
    //Tests Library
    testCompile ('org.springframework.boot:spring-boot-starter-test:' + springBootVersion)
    testCompile ( 'com.jayway.jsonpath:json-path:' + jayWayVersion )

    compile('org.codehaus.jackson:jackson-mapper-asl:1.9.10')

}

task appTestRun(type: Test, dependsOn: testClasses) {
    include '**/*Processor*'
}

tasks.withType(Test) {
    scanForTestClasses = false
    testLogging {
        events 'started', 'passed'
    }
}

task publish(dependsOn: build) << {

    def warFile = "$project.buildDir\\libs\\$publishMap.warFile"
    println "Publising $warFile"

    def procName = "curl --upload-file $warFile http://$publishMap.user:$publishMap.password@$publishMap.server:$publishMap.port/manager/text/deploy?path=/$publishMap.deploy&update=true"

    println "Executing: " + procName;

    def proc = procName.execute();

    proc.waitFor()

    if (proc.exitValue())
        throw new Exception("Publish war failed:" + proc.err.text)
    else
        print proc.text
}